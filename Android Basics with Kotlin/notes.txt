An "abstract" class is a class that cannot be instantiated because it is not fully implemented

If the values of properties and implementations of functions are not known


Inheritance in kotlin
======================


import kotlin.math.PI
import kotlin.math.sqrt


fun main() {
	val squareCabin = SquareCabin(6,3.5)
    with(squareCabin) {
    println("\nSquare Cabin\n============")
    println("Capacity: ${capacity}")
    println("Material: ${buildingMaterial}")
    println("Has room? ${hasRoom()}")
    getRoom()
    println("Floor area: ${floorArea()}")
    

}
   val roundHut = RoundHut(4,1.0) 
   with(roundHut) {
    println("\n Round Hut\n============")
    println("Capacity: ${capacity}")
    println("Material: ${buildingMaterial}")
    println("Has room? ${hasRoom()}")
    getRoom()
    println("Floor area: ${floorArea()}")
    println("Carpet size: ${calculateMaxCarpetSize()}")


}
   val roundTower = RoundTower(3,6.0)
   with(roundTower){
       println("\n Round Tower\n============")
    println("Capacity: ${capacity}")
    println("Material: ${buildingMaterial}")
    println("Has room? ${hasRoom()}")
    println("floors: ${roundTower.floors}")
    println("Floor area: ${floorArea()}")
    println("Carpet size: ${calculateMaxCarpetSize()}")


   }

    
}

abstract class Dwelling(private var residents : Int){
      abstract  val buildingMaterial : String
      abstract val capacity : Int
      fun hasRoom(): Boolean{
          return capacity > residents
      }
      abstract fun floorArea() : Double 
     fun getRoom() {
     if (capacity > residents) {
         residents++
         println("You got a room!")
    } else {
        println("Sorry, at capacity and no rooms left.")
    }
}
    
    }

class SquareCabin(residents : Int , val length : Double) : Dwelling(residents){
    override val buildingMaterial = "Wood"
    override val capacity = 6
    override fun floorArea() : Double {
        return (length * length)
        
    } 
    
}


open class RoundHut(residents : Int, val radius : Double) : Dwelling(residents){
    override val buildingMaterial = "Straw"
    override val capacity = 7
    override fun floorArea() : Double {
            return PI * radius * radius
    } 
    
    fun calculateMaxCarpetSize(): Double {
    val diameter = 2 * radius
    return sqrt(diameter * diameter / 2)
}
    
}

class RoundTower(residents: Int, radius : Double ,val floors : Int = 2) : RoundHut(residents , radius){
    override val buildingMaterial = "Stone"
    override val capacity = floors * 4
    override fun floorArea(): Double{
            return super.floorArea() * floors
    }
    
}



=======================================================================================================================================================

LIST

fun main() {
    val numbers : List<Int> = listOf(1,2,4,3,5,6)
    //val numbers = listOf(1,2,3,4,5)
    println(" List: $numbers")
	println(" List size: ${numbers.size}")
        // Access elements of the list

    println(" first element: ${numbers[0]}")
    println("last index: ${numbers.size-1}")
    println("last element ${numbers[numbers.size-1]}")
    println("${numbers.last()}")
        // Use the contains() method

    println("Contains 4? ${numbers.contains(4)}")
    println("Contains 7? ${numbers.contains(7)}")

    println("reversed list : ${numbers.reversed()} ")
    println("sorted list :  ${numbers.sorted()}")

    
    
}


MUTABLE LIST

fun main() {
    val entrees = mutableListOf<String>()
    println("Entrees: $entrees")

    // Add individual items using add()
    println("Add noodles: ${entrees.add("noodles")}")
    println("Entrees: $entrees")
    println("Add spaghetti: ${entrees.add("spaghetti")}")
    println("Entrees: $entrees")

    // Add a list of items using addAll()
    val moreItems = listOf("ravioli", "lasagna", "fettuccine")
    println("Add list: ${entrees.addAll(moreItems)}")
    println("Entrees: $entrees")

    // Remove an item using remove()
    println("Remove spaghetti: ${entrees.remove("spaghetti")}")
    println("Entrees: $entrees")
    println("Remove item that doesn't exist: ${entrees.remove("rice")}")
    println("Entrees: $entrees")

    // Remove an item using removeAt() with an index
    println("Remove first element: ${entrees.removeAt(0)}")
    println("Entrees: $entrees")

    // Clear out the list
    entrees.clear()
    println("Entrees: $entrees")

    // Check if the list is empty
    println("Empty? ${entrees.isEmpty()}")
}


iterating list

fun main() {
    val guestsPerFamily  = listOf(1,4,2,3)
    var index = 0
    var totalGuests = 0
    while(index < guestsPerFamily.size){
        totalGuests += guestsPerFamily[index]
        index++
    }
    
    println(totalGuests)
    
    val names = listOf("Jessica", "Henry", "Alicia", "Jose")
    for (name in names) {
    println(name.length)
}

    
    
}























